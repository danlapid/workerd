From ce738c62f33d1420db5f525aa5d62721ef5ae237 Mon Sep 17 00:00:00 2001
From: James M Snell <jasnell@gmail.com>
Date: Thu, 22 Jun 2023 15:29:26 -0700
Subject: Implement Promise Context Tagging


diff --git a/include/v8-callbacks.h b/include/v8-callbacks.h
index 6096301258719eb2713d8d6c08b7d4d926b6cd9a..2e5d3909dd2dae88d2146cbaab534c43a1460b38 100644
--- a/include/v8-callbacks.h
+++ b/include/v8-callbacks.h
@@ -462,6 +462,15 @@ using FilterETWSessionByURLCallback =
     bool (*)(Local<Context> context, const std::string& etw_filter_payload);
 #endif  // V8_OS_WIN
 
+/**
+ * PromiseCrossContextCallback is called when following a promise and the
+ * promise's context tag is not strictly equal to the isolate's current
+ * promise context tag.
+ */
+using PromiseCrossContextCallback = MaybeLocal<Promise> (*)(Local<Context> context,
+                                                            Local<Promise> promise,
+                                                            Local<Object> tag);
+
 }  // namespace v8
 
 #endif  // INCLUDE_V8_ISOLATE_CALLBACKS_H_
diff --git a/include/v8-isolate.h b/include/v8-isolate.h
index 17c107766b90454c2c25f9c4174cea6de42e0285..7a4586fefbf3d0a029eea3e6c98b9edc7a4c32af 100644
--- a/include/v8-isolate.h
+++ b/include/v8-isolate.h
@@ -1717,6 +1717,9 @@ class V8_EXPORT Isolate {
    */
   void LocaleConfigurationChangeNotification();
 
+  class PromiseContextScope;
+  void SetPromiseCrossContextCallback(PromiseCrossContextCallback callback);
+
   Isolate() = delete;
   ~Isolate() = delete;
   Isolate(const Isolate&) = delete;
@@ -1761,6 +1764,19 @@ MaybeLocal<T> Isolate::GetDataFromSnapshotOnce(size_t index) {
   return {};
 }
 
+class Isolate::PromiseContextScope {
+public:
+  PromiseContextScope(Isolate* isolate, v8::Local<v8::Object> tag);
+  ~PromiseContextScope();
+  PromiseContextScope(const PromiseContextScope&) = delete;
+  PromiseContextScope(PromiseContextScope&&) = delete;
+  PromiseContextScope& operator=(const PromiseContextScope&) = delete;
+  PromiseContextScope& operator=(PromiseContextScope&&) = delete;
+
+private:
+  internal::Isolate* isolate_;
+};
+
 }  // namespace v8
 
 #endif  // INCLUDE_V8_ISOLATE_H_
diff --git a/src/api/api.cc b/src/api/api.cc
index 404d19e8c5cf4b4505fb9106f0b649b44708e729..8b8633b5e35ddc1a3c6eab202116c68bdf4cb56b 100644
--- a/src/api/api.cc
+++ b/src/api/api.cc
@@ -12213,6 +12213,23 @@ std::string SourceLocation::ToString() const {
   return std::string(function_) + "@" + file_ + ":" + std::to_string(line_);
 }
 
+void Isolate::SetPromiseCrossContextCallback(PromiseCrossContextCallback callback) {
+  i::Isolate* isolate = reinterpret_cast<i::Isolate*>(this);
+  isolate->set_promise_cross_context_callback(callback);
+}
+
+Isolate::PromiseContextScope::PromiseContextScope(Isolate* isolate, v8::Local<v8::Object> tag)
+    : isolate_(reinterpret_cast<i::Isolate*>(isolate)) {
+  DCHECK(!isolate_->has_promise_context_tag());
+  DCHECK(!tag.IsEmpty());
+  i::Handle<i::Object> handle = Utils::OpenHandle(*tag);
+  isolate_->set_promise_context_tag(*handle);
+}
+
+Isolate::PromiseContextScope::~PromiseContextScope() {
+  isolate_->clear_promise_context_tag();
+}
+
 }  // namespace v8
 
 EXPORT_CONTEXTUAL_VARIABLE(v8::internal::StackAllocatedCheck)
diff --git a/src/builtins/promise-abstract-operations.tq b/src/builtins/promise-abstract-operations.tq
index 834007399ffdec3d7edc9cf6607a1ab22a15a1e4..a7698102cc44f88973463ac63707075a0fb51669 100644
--- a/src/builtins/promise-abstract-operations.tq
+++ b/src/builtins/promise-abstract-operations.tq
@@ -20,6 +20,9 @@ extern transitioning runtime PromiseResolveAfterResolved(
 
 extern transitioning runtime PromiseRejectEventFromStack(
     implicit context: Context)(JSPromise, JSAny): JSAny;
+
+extern transitioning runtime PromiseContextCheck(
+    implicit context: Context)(JSPromise): JSPromise;
 }
 
 // https://tc39.es/ecma262/#sec-promise-abstract-operations
@@ -458,12 +461,13 @@ transitioning macro PerformPromiseThenImpl(
     // PromiseReaction holding both the onFulfilled and onRejected callbacks.
     // Once the {promise} is resolved we decide on the concrete handler to
     // push onto the microtask queue.
+    const delegate = runtime::PromiseContextCheck(promise);
     const promiseReactions =
-        UnsafeCast<(Zero | PromiseReaction)>(promise.reactions_or_result);
-
+        UnsafeCast<(Zero | PromiseReaction)>(delegate.reactions_or_result);
     const reaction = NewPromiseReaction(
         promiseReactions, resultPromiseOrCapability, onFulfilled, onRejected);
-    promise.reactions_or_result = reaction;
+    delegate.reactions_or_result = reaction;
+    delegate.SetHasHandler();
   } else {
     const reactionsOrResult = promise.reactions_or_result;
     let microtask: PromiseReactionJobTask;
@@ -485,8 +489,8 @@ transitioning macro PerformPromiseThenImpl(
         }
       }
     EnqueueMicrotask(handlerContext, microtask);
+    promise.SetHasHandler();
   }
-  promise.SetHasHandler();
 }
 
 // https://tc39.es/ecma262/#sec-performpromisethen
diff --git a/src/builtins/promise-constructor.tq b/src/builtins/promise-constructor.tq
index 7ace785675fe1b8ae005a1c38f9c0c32e41ac7f3..88efee16b51a6e26bd20fc4ed1222091cac8670b 100644
--- a/src/builtins/promise-constructor.tq
+++ b/src/builtins/promise-constructor.tq
@@ -8,6 +8,9 @@
 namespace runtime {
 extern transitioning runtime PromiseHookInit(
     implicit context: Context)(Object, Object): JSAny;
+
+extern transitioning runtime PromiseContextInit(
+    implicit context: Context)(JSPromise): JSAny;
 }
 
 // https://tc39.es/ecma262/#sec-promise-constructor
@@ -65,6 +68,7 @@ transitioning javascript builtin PromiseConstructor(
     result = UnsafeCast<JSPromise>(
         FastNewObject(context, promiseFun, UnsafeCast<JSReceiver>(newTarget)));
     PromiseInit(result);
+    runtime::PromiseContextInit(result);
     RunAnyPromiseHookInit(result, Undefined);
   }
 
diff --git a/src/builtins/promise-misc.tq b/src/builtins/promise-misc.tq
index 8accbc33c6872bee1533897a8a846d0456ecf79f..6b409b806468ae0dd9007cb1ac82e546aa6f652f 100644
--- a/src/builtins/promise-misc.tq
+++ b/src/builtins/promise-misc.tq
@@ -52,6 +52,7 @@ macro PromiseInit(promise: JSPromise): void {
     is_silent: false,
     async_task_id: 0
   });
+  promise.context_tag = kZero;
   promise_internal::ZeroOutEmbedderOffsets(promise);
 }
 
@@ -71,6 +72,7 @@ macro InnerNewJSPromise(implicit context: Context)(): JSPromise {
     is_silent: false,
     async_task_id: 0
   });
+  promise.context_tag = kZero;
   return promise;
 }
 
@@ -270,6 +272,7 @@ transitioning macro NewJSPromise(implicit context: Context)(parent: Object):
     JSPromise {
   const instance = InnerNewJSPromise();
   PromiseInit(instance);
+  runtime::PromiseContextInit(instance);
   RunAnyPromiseHookInit(instance, parent);
   return instance;
 }
@@ -293,6 +296,7 @@ transitioning macro NewJSPromise(
   instance.reactions_or_result = result;
   instance.SetStatus(status);
   promise_internal::ZeroOutEmbedderOffsets(instance);
+  runtime::PromiseContextInit(instance);
   RunAnyPromiseHookInit(instance, Undefined);
   return instance;
 }
diff --git a/src/compiler/js-create-lowering.cc b/src/compiler/js-create-lowering.cc
index 07da2db2bb38d95636777c0d2ac7e7aa4993514f..b7ecbde6cae44ea61be58f05a370ac3e120fb4c4 100644
--- a/src/compiler/js-create-lowering.cc
+++ b/src/compiler/js-create-lowering.cc
@@ -1084,10 +1084,12 @@ Reduction JSCreateLowering::ReduceJSCreatePromise(Node* node) {
           jsgraph()->EmptyFixedArrayConstant());
   a.Store(AccessBuilder::ForJSObjectOffset(JSPromise::kReactionsOrResultOffset),
           jsgraph()->ZeroConstant());
+  a.Store(AccessBuilder::ForJSObjectOffset(JSPromise::kContextTagOffset),
+          jsgraph()->ZeroConstant());
   static_assert(v8::Promise::kPending == 0);
   a.Store(AccessBuilder::ForJSObjectOffset(JSPromise::kFlagsOffset),
           jsgraph()->ZeroConstant());
-  static_assert(JSPromise::kHeaderSize == 5 * kTaggedSize);
+  static_assert(JSPromise::kHeaderSize == 6 * kTaggedSize);
   for (int offset = JSPromise::kHeaderSize;
        offset < JSPromise::kSizeWithEmbedderFields; offset += kTaggedSize) {
     a.Store(AccessBuilder::ForJSObjectOffset(offset),
diff --git a/src/diagnostics/objects-printer.cc b/src/diagnostics/objects-printer.cc
index 0124198dd87e60c2054776e06f1384679da9f36a..4da8a5a5aeb051c16be082339f3998fbdd99ad9b 100644
--- a/src/diagnostics/objects-printer.cc
+++ b/src/diagnostics/objects-printer.cc
@@ -846,6 +846,7 @@ void JSPromise::JSPromisePrint(std::ostream& os) {
   }
   os << "\n - has_handler: " << has_handler();
   os << "\n - is_silent: " << is_silent();
+  os << "\n - context_tag: " << Brief(context_tag());
   JSObjectPrintBody(os, *this);
 }
 
diff --git a/src/execution/isolate-inl.h b/src/execution/isolate-inl.h
index f81666ddd2f513a9a1f39b9e486b451bf3c7574d..9e0969460fd33d8cc893e04d3418e1cbed01d6a0 100644
--- a/src/execution/isolate-inl.h
+++ b/src/execution/isolate-inl.h
@@ -134,6 +134,26 @@ bool Isolate::is_execution_terminating() {
          i::ReadOnlyRoots(this).termination_exception();
 }
 
+Tagged<Object> Isolate::promise_context_tag() {
+  return promise_context_tag_;
+}
+
+bool Isolate::has_promise_context_tag() {
+  return promise_context_tag_ != ReadOnlyRoots(this).the_hole_value();
+}
+
+void Isolate::clear_promise_context_tag() {
+  set_promise_context_tag(ReadOnlyRoots(this).the_hole_value());
+}
+
+void Isolate::set_promise_context_tag(Tagged<Object> tag) {
+  promise_context_tag_ = tag;
+}
+
+void Isolate::set_promise_cross_context_callback(PromiseCrossContextCallback callback) {
+  promise_cross_context_callback_ = callback;
+}
+
 #ifdef DEBUG
 Tagged<Object> Isolate::VerifyBuiltinsResult(Tagged<Object> result) {
   if (is_execution_terminating() && !v8_flags.strict_termination_checks) {
diff --git a/src/execution/isolate.cc b/src/execution/isolate.cc
index 922d728161538461b55e731ed82904cdd224ed78..24e6b532164d3610a9273770038a4306769fdc09 100644
--- a/src/execution/isolate.cc
+++ b/src/execution/isolate.cc
@@ -588,6 +588,8 @@ void Isolate::Iterate(RootVisitor* v, ThreadLocalTop* thread) {
                       FullObjectSlot(&thread->pending_message_));
   v->VisitRootPointer(Root::kStackRoots, nullptr,
                       FullObjectSlot(&thread->context_));
+  v->VisitRootPointer(Root::kStackRoots, nullptr,
+                      FullObjectSlot(&promise_context_tag_));
 
   for (v8::TryCatch* block = thread->try_catch_handler_; block != nullptr;
        block = block->next_) {
@@ -5401,6 +5403,7 @@ bool Isolate::Init(SnapshotData* startup_snapshot_data,
     shared_heap_object_cache_.push_back(ReadOnlyRoots(this).undefined_value());
   }
 
+  clear_promise_context_tag();
   InitializeThreadLocal();
 
   // Profiler has to be created after ThreadLocal is initialized
@@ -7240,5 +7243,39 @@ void DefaultWasmAsyncResolvePromiseCallback(
   CHECK(ret.IsJust() ? ret.FromJust() : isolate->IsExecutionTerminating());
 }
 
+class Isolate::PromiseCrossContextCallbackScope {
+public:
+  PromiseCrossContextCallbackScope(Isolate& isolate) : isolate_(isolate) {
+    DCHECK(!isolate_.in_promise_cross_context_callback_);
+    isolate_.in_promise_cross_context_callback_ = true;
+  }
+  ~PromiseCrossContextCallbackScope() {
+    isolate_.in_promise_cross_context_callback_ = false;
+  }
+private:
+  Isolate& isolate_;
+};
+
+MaybeHandle<JSPromise> Isolate::RunPromiseCrossContextCallback(Handle<NativeContext> context,
+                                                               Handle<JSPromise> promise) {
+  if (promise_cross_context_callback_ == nullptr || in_promise_cross_context_callback_) {
+    return promise;
+  }
+  PromiseCrossContextCallbackScope callback_scope(*this);
+  CHECK(IsJSReceiver(promise->context_tag()));
+
+  Handle<JSObject> context_tag(Cast<JSObject>(promise->context_tag()), this);
+  v8::Local<v8::Promise> result;
+  API_ASSIGN_RETURN_ON_EXCEPTION_VALUE (
+      this, result,
+      promise_cross_context_callback_(
+          Utils::ToLocal(context),
+          v8::Utils::PromiseToLocal(promise),
+          v8::Utils::ToLocal(context_tag)),
+      MaybeHandle<JSPromise>());
+
+  return v8::Utils::OpenHandle(*result);
+}
+
 }  // namespace internal
 }  // namespace v8
diff --git a/src/execution/isolate.h b/src/execution/isolate.h
index db1afe3715e7ee032e1be54153a2588deb05f34d..4cca9257840fb7e71ddaac967f5a0515b830863d 100644
--- a/src/execution/isolate.h
+++ b/src/execution/isolate.h
@@ -2225,6 +2225,14 @@ class V8_EXPORT_PRIVATE Isolate final : private HiddenFactory {
                                        v8::ExceptionContext callback_kind);
   void SetExceptionPropagationCallback(ExceptionPropagationCallback callback);
 
+  inline Tagged<Object> promise_context_tag();
+  inline bool has_promise_context_tag();
+  inline void clear_promise_context_tag();
+  inline void set_promise_context_tag(Tagged<Object> tag);
+  inline void set_promise_cross_context_callback(PromiseCrossContextCallback callback);
+  MaybeHandle<JSPromise> RunPromiseCrossContextCallback(Handle<NativeContext> context,
+                                                        Handle<JSPromise> promise);
+
 #ifdef V8_ENABLE_WASM_SIMD256_REVEC
   void set_wasm_revec_verifier_for_test(
       compiler::turboshaft::WasmRevecVerifier* verifier) {
@@ -2737,12 +2745,19 @@ class V8_EXPORT_PRIVATE Isolate final : private HiddenFactory {
   int current_thread_counter_ = 0;
 #endif
 
+  Tagged<Object> promise_context_tag_;
+  PromiseCrossContextCallback promise_cross_context_callback_;
+  bool in_promise_cross_context_callback_ = false;
+
+  class PromiseCrossContextCallbackScope;
+
   friend class heap::HeapTester;
   friend class GlobalSafepoint;
   friend class TestSerializer;
   friend class SharedHeapNoClientsTest;
   friend class IsolateForPointerCompression;
   friend class IsolateForSandbox;
+  friend class PromiseCrossContextCallbackScope;
 };
 
 // The current entered Isolate and its thread data. Do not access these
diff --git a/src/heap/factory.cc b/src/heap/factory.cc
index 5aba656b043139cdafafb181dd81a852fd6c5487..1dd175df6edb2479556fa21b748c528709b235c2 100644
--- a/src/heap/factory.cc
+++ b/src/heap/factory.cc
@@ -4271,6 +4271,12 @@ Handle<JSPromise> Factory::NewJSPromiseWithoutHook() {
   DisallowGarbageCollection no_gc;
   Tagged<JSPromise> raw = *promise;
   raw->set_reactions_or_result(Smi::zero(), SKIP_WRITE_BARRIER);
+  if (!isolate()->has_promise_context_tag()) {
+    raw->set_context_tag(Smi::zero(), SKIP_WRITE_BARRIER);
+  } else {
+    raw->set_context_tag(Cast<JSAny>(isolate()->promise_context_tag()));
+  }
+
   raw->set_flags(0);
   // TODO(v8) remove once embedder data slots are always zero-initialized.
   InitEmbedderFields(*promise, Smi::zero());
diff --git a/src/objects/js-promise.tq b/src/objects/js-promise.tq
index 29acfa259048f1dae2dfcb02ef57ca4ef69e2d9a..b9602cc98d5fb33a4a28d7ced8c5011215b89302 100644
--- a/src/objects/js-promise.tq
+++ b/src/objects/js-promise.tq
@@ -32,6 +32,7 @@ extern class JSPromise extends JSObjectWithEmbedderSlots {
   // Smi 0 terminated list of PromiseReaction objects in case the JSPromise was
   // not settled yet, otherwise the result.
   reactions_or_result: Zero|PromiseReaction|JSAny;
+  context_tag: Zero|JSAny;
   flags: SmiTagged<JSPromiseFlags>;
 }
 
diff --git a/src/profiler/heap-snapshot-generator.cc b/src/profiler/heap-snapshot-generator.cc
index 86b7b9a05eaa8a63e6649e39bdb7e8917a2aecfb..2b0b03facc2ce4bee9cba93caaad067a1c1a6c29 100644
--- a/src/profiler/heap-snapshot-generator.cc
+++ b/src/profiler/heap-snapshot-generator.cc
@@ -1909,6 +1909,9 @@ void V8HeapExplorer::ExtractJSPromiseReferences(HeapEntry* entry,
   SetInternalReference(entry, "reactions_or_result",
                        promise->reactions_or_result(),
                        JSPromise::kReactionsOrResultOffset);
+  SetInternalReference(entry, "context_tag",
+                       promise->context_tag(),
+                       JSPromise::kContextTagOffset);
 }
 
 void V8HeapExplorer::ExtractJSGeneratorObjectReferences(
diff --git a/src/runtime/runtime-promise.cc b/src/runtime/runtime-promise.cc
index 5b4b9c2e9de41673105efe28b2e731550581ee7b..869c62e7590d3ba99e7e0f5f5fc41677b42dd2d6 100644
--- a/src/runtime/runtime-promise.cc
+++ b/src/runtime/runtime-promise.cc
@@ -197,5 +197,40 @@ RUNTIME_FUNCTION(Runtime_ConstructInternalAggregateErrorHelper) {
   return *result;
 }
 
+RUNTIME_FUNCTION(Runtime_PromiseContextInit) {
+  HandleScope scope(isolate);
+  DCHECK_EQ(1, args.length());
+  if (!isolate->has_promise_context_tag()) {
+    args.at<JSPromise>(0)->set_context_tag(Smi::zero());
+  } else {
+    CHECK(!IsUndefined(isolate->promise_context_tag()));
+    args.at<JSPromise>(0)->set_context_tag(Cast<JSAny>(isolate->promise_context_tag()));
+  }
+  return ReadOnlyRoots(isolate).undefined_value();
+}
+
+RUNTIME_FUNCTION(Runtime_PromiseContextCheck) {
+  HandleScope scope(isolate);
+  DCHECK_EQ(1, args.length());
+
+  Handle<JSPromise> promise = args.at<JSPromise>(0);
+
+  // If promise.context_tag() is strict equal to isolate.promise_context_tag(),
+  // or if the promise being checked does not have a context tag, we'll just return
+  // promise directly.
+  Tagged<JSAny> obj = promise->context_tag();
+  if (obj == Smi::zero() || obj == isolate->promise_context_tag()) {
+    return *promise;
+  }
+
+  // Otherwise we defer to the PromiseCrossContextCallback. If the callback
+  // has not been set, then it should just return the same promise back here.
+  Handle<JSPromise> result;
+  ASSIGN_RETURN_FAILURE_ON_EXCEPTION(isolate, result,
+    isolate->RunPromiseCrossContextCallback(isolate->native_context(), promise));
+
+  return *result;
+}
+
 }  // namespace internal
 }  // namespace v8
diff --git a/src/runtime/runtime.h b/src/runtime/runtime.h
index 3fa07b54517f8097947ff3eead162b0f4c8031bd..75755ad5354f27fe068679513440dcdb257a3e56 100644
--- a/src/runtime/runtime.h
+++ b/src/runtime/runtime.h
@@ -400,7 +400,9 @@ namespace internal {
   F(PromiseRejectAfterResolved, 2, 1)    \
   F(PromiseResolveAfterResolved, 2, 1)   \
   F(ConstructAggregateErrorHelper, 4, 1) \
-  F(ConstructInternalAggregateErrorHelper, -1 /* <= 5*/, 1)
+  F(ConstructInternalAggregateErrorHelper, -1 /* <= 5*/, 1) \
+  F(PromiseContextInit, 1, 1)            \
+  F(PromiseContextCheck, 1, 1)
 
 #define FOR_EACH_INTRINSIC_PROXY(F, I) \
   F(CheckProxyGetSetTrapResult, 2, 1)  \
